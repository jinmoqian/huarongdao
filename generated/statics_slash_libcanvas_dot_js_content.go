package generated
const statics_slash_libcanvas_dot_js = "var __extends = (this && this.__extends) || (function () {\x0A    var extendStatics = function (d, b) {\x0A        extendStatics = Object.setPrototypeOf ||\x0A            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\x0A            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\x0A        return extendStatics(d, b);\x0A    };\x0A    return function (d, b) {\x0A        if (typeof b !== \x22function\x22 && b !== null)\x0A            throw new TypeError(\x22Class extends value \x22 + String(b) + \x22 is not a constructor or null\x22);\x0A        extendStatics(d, b);\x0A        function __() { this.constructor = d; }\x0A        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\x0A    };\x0A})();\x0Avar CanvasProperties = /** @class */ (function () {\x0A    function CanvasProperties() {\x0A    }\x0A    CanvasProperties.prototype.checkTransform = function (ctx) {\x0A        this.transformEnable = ctx.getTransform ? true : false;\x0A    };\x0A    CanvasProperties.prototype.getTransformEnable = function () {\x0A        return this.transformEnable;\x0A    };\x0A    return CanvasProperties;\x0A}());\x0Avar canvasProperties = new CanvasProperties();\x0Avar XYPair = /** @class */ (function () {\x0A    function XYPair(x, y) {\x0A        this.x = x;\x0A        this.y = y;\x0A    }\x0A    return XYPair;\x0A}());\x0Afunction fromGlobalPoint(x, y, tr) {\x0A    if (!canvasProperties.getTransformEnable()) {\x0A        return new XYPair(x, y);\x0A    }\x0A    var a = new DOMMatrix(tr);\x0A    a.invertSelf();\x0A    return new XYPair(a.a * x + a.c * y + a.e, a.b * x + a.d * y + a.f);\x0A}\x0Afunction toGlobalPoint(x, y, tr) {\x0A    return new XYPair(tr.a * x + tr.c * y + tr.e, tr.b * x + tr.d * y + tr.f);\x0A}\x0Avar CanvasRect = /** @class */ (function () {\x0A    function CanvasRect(left, top, right, bottom) {\x0A        this.left = left;\x0A        this.top = top;\x0A        this.right = right;\x0A        this.bottom = bottom;\x0A    }\x0A    CanvasRect.prototype.width = function () {\x0A        return this.right - this.left;\x0A    };\x0A    CanvasRect.prototype.height = function () {\x0A        return this.bottom - this.top;\x0A    };\x0A    CanvasRect.prototype.merge = function (a) {\x0A        if (a == null) {\x0A            return;\x0A        }\x0A        if (a.left < this.left) {\x0A            this.left = a.left;\x0A        }\x0A        if (a.right > this.right) {\x0A            this.right = a.right;\x0A        }\x0A        if (a.top < this.top) {\x0A            this.top = a.top;\x0A        }\x0A        if (a.bottom > this.bottom) {\x0A            this.bottom = a.bottom;\x0A        }\x0A    };\x0A    CanvasRect.prototype.copy = function () {\x0A        return new CanvasRect(this.left, this.top, this.right, this.bottom);\x0A    };\x0A    return CanvasRect;\x0A}());\x0Avar minMouseMoveDist = 10;\x0Avar OperatableRectMng = /** @class */ (function () {\x0A    function OperatableRectMng(target) {\x0A        var _this = this;\x0A        this.target = target;\x0A        this.rects = new Array();\x0A        this.moving = false;\x0A        window.addEventListener(\x22mousemove\x22, function (ev) {\x0A            if (_this.rectMouseDown != null) {\x0A                if (ev.target == _this.target) {\x0A                    if (_this.moving) {\x0A                        _this.moveRect(ev);\x0A                    }\x0A                    else {\x0A                        var dx = ev.offsetX - _this.pointMouseDown[0];\x0A                        var dy = ev.offsetY - _this.pointMouseDown[1];\x0A                        var dd = Math.sqrt(dx * dx + dy * dy);\x0A                        if (dd > minMouseMoveDist && _this.rectMouseDown.isDragable()) {\x0A                            _this.moving = true;\x0A                            var pmd = fromGlobalPoint(_this.pointMouseDown[0], _this.pointMouseDown[1], _this.rectMouseDown.getTransform());\x0A                            _this.pointMouseDown[0] = pmd.x;\x0A                            _this.pointMouseDown[1] = pmd.y;\x0A                            _this.moveRect(ev);\x0A                        }\x0A                    }\x0A                }\x0A                else if (_this.moving) {\x0A                    _this.rectMouseDown.onOut();\x0A                    _this.operationEnd();\x0A                }\x0A            }\x0A        });\x0A        window.addEventListener(\x22mousedown\x22, function (ev) {\x0A            if (ev.target == _this.target) {\x0A                var curRect;\x0A                var curZ = Number.MIN_VALUE;\x0A                var found;\x0A                var pointMouseDown;\x0A                _this.rects.forEach(function (rect) {\x0A                    if (_this.inRect(rect, ev.offsetX, ev.offsetY)) {\x0A                        var z = rect.getZ();\x0A                        if (z >= curZ) {\x0A                            curZ = z;\x0A                            curRect = rect;\x0A                            found = true;\x0A                            pointMouseDown = [ev.offsetX, ev.offsetY];\x0A                        }\x0A                    }\x0A                });\x0A                if (found) {\x0A                    _this.rectMouseDown = curRect;\x0A                    _this.pointMouseDown = pointMouseDown;\x0A                }\x0A            }\x0A        });\x0A        window.addEventListener(\x22mouseup\x22, function (ev) {\x0A            if (_this.rectMouseDown != null) {\x0A                if (ev.target == _this.target) {\x0A                    if (_this.moving) {\x0A                        _this.rectMouseDown.onRelease();\x0A                    }\x0A                    else {\x0A                        if (_this.inRect(_this.rectMouseDown, ev.offsetX, ev.offsetY)) {\x0A                            _this.rectMouseDown.onClick();\x0A                        }\x0A                        else {\x0A                            _this.rectMouseDown.onClickCancel();\x0A                        }\x0A                    }\x0A                }\x0A                else {\x0A                    _this.rectMouseDown.onClickCancel();\x0A                }\x0A                _this.operationEnd();\x0A            }\x0A        });\x0A    }\x0A    OperatableRectMng.prototype.moveRect = function (ev) {\x0A        var p = fromGlobalPoint(ev.offsetX, ev.offsetY, this.rectMouseDown.getTransform());\x0A        this.rectMouseDown.onDrag(this.pointMouseDown[0], this.pointMouseDown[1], p.x, p.y);\x0A    };\x0A    OperatableRectMng.prototype.inRect = function (rect, x, y) {\x0A        var p = fromGlobalPoint(x, y, rect.getTransform());\x0A        var r = rect.getRect();\x0A        return (r.top <= p.y && p.y <= r.bottom && r.left <= p.x && p.x <= r.right);\x0A    };\x0A    OperatableRectMng.prototype.add = function (rect) {\x0A        this.rects.push(rect);\x0A        rect.added();\x0A    };\x0A    OperatableRectMng.prototype.remove = function (rect) {\x0A        var idx = this.rects.indexOf(rect);\x0A        if (idx != -1) {\x0A            this.rects.splice(idx, 1)[0].removed();\x0A        }\x0A    };\x0A    OperatableRectMng.prototype.operationEnd = function () {\x0A        this.rectMouseDown = null;\x0A        this.pointMouseDown = null;\x0A        this.moving = false;\x0A    };\x0A    return OperatableRectMng;\x0A}());\x0Avar OperatableRect = /** @class */ (function () {\x0A    function OperatableRect() {\x0A        this.rect = new CanvasRect(0, 0, 0, 0);\x0A        this.enable = false;\x0A    }\x0A    OperatableRect.prototype.added = function () { };\x0A    OperatableRect.prototype.removed = function () { };\x0A    OperatableRect.prototype.setTransform = function (tr) {\x0A        this.tr = tr;\x0A    };\x0A    OperatableRect.prototype.getTransform = function () {\x0A        return this.tr;\x0A    };\x0A    OperatableRect.prototype.setZ = function (z) {\x0A        this.z = z;\x0A    };\x0A    OperatableRect.prototype.getZ = function () {\x0A        return this.z;\x0A    };\x0A    OperatableRect.prototype.setRect = function (left, top, right, bottom) {\x0A        this.rect.left = left;\x0A        this.rect.top = top;\x0A        this.rect.right = right;\x0A        this.rect.bottom = bottom;\x0A    };\x0A    OperatableRect.prototype.getRect = function () {\x0A        return this.rect;\x0A    };\x0A    OperatableRect.prototype.isDragable = function () {\x0A        return this.dragable;\x0A    };\x0A    OperatableRect.prototype.setDragable = function (dragable) {\x0A        this.dragable = dragable;\x0A    };\x0A    OperatableRect.prototype.Enable = function (enable) {\x0A        this.enable = enable;\x0A    };\x0A    OperatableRect.prototype.onClick = function () { };\x0A    OperatableRect.prototype.onClickCancel = function () { };\x0A    OperatableRect.prototype.onDrag = function (downX, downY, x, y) { };\x0A    OperatableRect.prototype.onRelease = function () { };\x0A    OperatableRect.prototype.onOut = function () { };\x0A    return OperatableRect;\x0A}());\x0Avar Button = /** @class */ (function (_super) {\x0A    __extends(Button, _super);\x0A    function Button(clickFunc, cancelFunc) {\x0A        var _this = _super.call(this) || this;\x0A        _this.clickFunc = clickFunc;\x0A        _this.cancelFunc = cancelFunc;\x0A        return _this;\x0A    }\x0A    Button.prototype.onClick = function () {\x0A        if (this.enable) {\x0A            this.clickFunc();\x0A        }\x0A    };\x0A    Button.prototype.onClickCancel = function () {\x0A        this.cancelFunc();\x0A    };\x0A    return Button;\x0A}(OperatableRect));\x0Avar DragableComponent = /** @class */ (function (_super) {\x0A    __extends(DragableComponent, _super);\x0A    function DragableComponent(onDrag, onRelease, onOut) {\x0A        var _this = _super.call(this) || this;\x0A        _this.onDragFunc = onDrag;\x0A        _this.onReleaseFunc = onRelease;\x0A        _this.onOutFunc = onOut;\x0A        _this.dragable = true;\x0A        return _this;\x0A    }\x0A    DragableComponent.prototype.onDrag = function (downX, downY, x, y) {\x0A        this.onDragFunc(downX, downY, x, y);\x0A    };\x0A    DragableComponent.prototype.onRelease = function () {\x0A        this.onReleaseFunc();\x0A    };\x0A    DragableComponent.prototype.onOut = function () {\x0A        this.onOutFunc();\x0A    };\x0A    return DragableComponent;\x0A}(OperatableRect));\x0Avar MovableComponent = /** @class */ (function (_super) {\x0A    __extends(MovableComponent, _super);\x0A    function MovableComponent() {\x0A        return _super !== null && _super.apply(this, arguments) || this;\x0A    }\x0A    MovableComponent.prototype.setRect = function (left, top, right, bottom) {\x0A        this.rawRect = new CanvasRect(0, 0, 0, 0);\x0A        this.rawRect.left = left;\x0A        this.rawRect.top = top;\x0A        this.rawRect.right = right;\x0A        this.rawRect.bottom = bottom;\x0A        _super.prototype.setRect.call(this, left, top, right, bottom);\x0A    };\x0A    MovableComponent.prototype.onDrag = function (downX, downY, x, y) {\x0A        var dx = downX - this.rawRect.left;\x0A        var dy = downY - this.rawRect.top;\x0A        _super.prototype.setRect.call(this, x - dx, y - dy, x - dx + this.rawRect.right - this.rawRect.left, y - dy + this.rawRect.bottom - this.rawRect.top);\x0A        _super.prototype.onDrag.call(this, downX, downY, x, y);\x0A    };\x0A    MovableComponent.prototype.copyRect = function () {\x0A        var r = _super.prototype.getRect.call(this);\x0A        for (var index in r) {\x0A            this.rawRect[index] = r[index];\x0A        }\x0A    };\x0A    MovableComponent.prototype.setRecentRectWhenRelease = function (recentRectWhenRelease) {\x0A        this.recentRectWhenRelease = recentRectWhenRelease;\x0A    };\x0A    MovableComponent.prototype.onRelease = function () {\x0A        if (this.recentRectWhenRelease) {\x0A            this.copyRect();\x0A        }\x0A        _super.prototype.onRelease.call(this);\x0A    };\x0A    MovableComponent.prototype.setRecentRectWhenOut = function (recentRectWhenOut) {\x0A        this.recentRectWhenOut = recentRectWhenOut;\x0A    };\x0A    MovableComponent.prototype.onOut = function () {\x0A        if (this.recentRectWhenOut) {\x0A            this.copyRect();\x0A        }\x0A        _super.prototype.onOut.call(this);\x0A    };\x0A    return MovableComponent;\x0A}(DragableComponent));\x0Avar CanvasSprite = /** @class */ (function () {\x0A    function CanvasSprite(tr, z, paintFunc) {\x0A        this.subs = new Array();\x0A        this.tr = tr;\x0A        this.z = z;\x0A        this.paintFunc = paintFunc;\x0A    }\x0A    CanvasSprite.prototype.added = function () { };\x0A    CanvasSprite.prototype.add = function (sub) {\x0A        this.subs.push(sub);\x0A        sub.added();\x0A    };\x0A    CanvasSprite.prototype.removed = function (level) {\x0A        this.subs.forEach(function (s) {\x0A            s.removed(level + 1);\x0A        });\x0A    };\x0A    CanvasSprite.prototype.remove = function (sub) {\x0A        sub.removed(0);\x0A        var idx = this.subs.indexOf(sub);\x0A        if (idx != -1) {\x0A            this.subs.splice(idx, 1);\x0A        }\x0A    };\x0A    CanvasSprite.prototype.setZ = function (z) {\x0A        this.z = z;\x0A    };\x0A    CanvasSprite.prototype.getZ = function () { return this.z; };\x0A    CanvasSprite.prototype.setTransform = function (tr) {\x0A        this.tr = tr;\x0A    };\x0A    CanvasSprite.prototype.getTransform = function () {\x0A        return this.tr;\x0A    };\x0A    CanvasSprite.prototype.refresh = function (ctx) {\x0A        this.subs.sort(function (a, b) {\x0A            var za = a.getZ();\x0A            var zb = b.getZ();\x0A            if (za < zb) {\x0A                return -1;\x0A            }\x0A            else if (za > zb) {\x0A                return +1;\x0A            }\x0A            return 0;\x0A        });\x0A        var r = new CanvasRect(0, 0, 0, 0);\x0A        for (var idx in this.subs) {\x0A            r.merge(this.subs[idx].range());\x0A        }\x0A        var selfOnPainted = false;\x0A        for (var idx in this.subs) {\x0A            if (!selfOnPainted && this.subs[idx].getZ() >= 0) {\x0A                selfOnPainted = true;\x0A                this.draw(ctx, r);\x0A            }\x0A            this.subs[idx].refresh(ctx);\x0A        }\x0A        if (!selfOnPainted) {\x0A            this.draw(ctx, r);\x0A        }\x0A    };\x0A    CanvasSprite.prototype.draw = function (ctx, r) {\x0A        ctx.save();\x0A        if (this.tr != null) {\x0A            ctx.setTransform(this.tr);\x0A        }\x0A        this.paintFunc(ctx, r);\x0A        ctx.restore();\x0A    };\x0A    CanvasSprite.prototype.range = function () {\x0A        return null;\x0A    };\x0A    return CanvasSprite;\x0A}());\x0Afunction RootSprite(root, ctx) {\x0A    var f = function () {\x0A        root.refresh(ctx);\x0A        window.requestAnimationFrame(f);\x0A    };\x0A    window.requestAnimationFrame(f);\x0A}\x0Avar CanvasOperatableSprite = /** @class */ (function (_super) {\x0A    __extends(CanvasOperatableSprite, _super);\x0A    function CanvasOperatableSprite(mng, tr, z, paintFunc) {\x0A        var _this = _super.call(this, tr, z, paintFunc) || this;\x0A        _this.mng = mng;\x0A        return _this;\x0A    }\x0A    CanvasOperatableSprite.prototype.setOperable = function (opRect) {\x0A        this.opRect = opRect;\x0A    };\x0A    CanvasOperatableSprite.prototype.getOperable = function () {\x0A        return this.opRect;\x0A    };\x0A    CanvasOperatableSprite.prototype.getRect = function () {\x0A        return this.opRect.getRect();\x0A    };\x0A    CanvasOperatableSprite.prototype.setRect = function (left, top, right, bottom) {\x0A        this.opRect.setRect(left, top, right, bottom);\x0A    };\x0A    CanvasOperatableSprite.prototype.setDragable = function (dragable) {\x0A        this.opRect.setDragable(dragable);\x0A    };\x0A    CanvasOperatableSprite.prototype.removed = function (level) {\x0A        _super.prototype.removed.call(this, level);\x0A        this.mng.remove(this.getOperable());\x0A    };\x0A    CanvasOperatableSprite.prototype.add = function (sub) {\x0A        _super.prototype.add.call(this, sub);\x0A    };\x0A    return CanvasOperatableSprite;\x0A}(CanvasSprite));\x0Avar CanvasMovableSprite = /** @class */ (function (_super) {\x0A    __extends(CanvasMovableSprite, _super);\x0A    function CanvasMovableSprite(mng, tr, z, rect, paintFunc, onDrag, onRelease, onOut) {\x0A        var _this = _super.call(this, mng, tr, z, paintFunc) || this;\x0A        var mc = new MovableComponent(onDrag, onRelease, onOut);\x0A        mc.setTransform(tr);\x0A        mc.setZ(z);\x0A        mc.setRect(rect.left, rect.top, rect.right, rect.bottom);\x0A        mc.setRecentRectWhenOut(true);\x0A        _this.setOperable(mc);\x0A        mng.add(mc);\x0A        _this.mng = mng;\x0A        return _this;\x0A    }\x0A    CanvasMovableSprite.prototype.getOperable = function () {\x0A        return this.opRect;\x0A    };\x0A    return CanvasMovableSprite;\x0A}(CanvasOperatableSprite));\x0Avar CanvasButtonSprite = /** @class */ (function (_super) {\x0A    __extends(CanvasButtonSprite, _super);\x0A    function CanvasButtonSprite(mng, tr, z, paintFunc, b) {\x0A        var _this = _super.call(this, mng, tr, z, paintFunc) || this;\x0A        _this.setOperable(b);\x0A        mng.add(b);\x0A        return _this;\x0A    }\x0A    return CanvasButtonSprite;\x0A}(CanvasOperatableSprite));\x0A"
